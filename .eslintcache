[{"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\index.js":"1","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\layouts\\Admin.js":"2","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Footer\\Footer.js":"3","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\layouts\\adminStyle.js":"4","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Navbars\\Navbar.js":"5","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\TableList\\TableList.js":"6","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\Notifications\\Notifications.js":"7","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\Maps\\Maps.js":"8","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\Typography\\Typography.js":"9","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\sidebarStyle.js":"10","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Navbars\\RTLNavbarLinks.js":"11","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\headerStyle.js":"12","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Grid\\GridItem.js":"13","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Card\\CardHeader.js":"14","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Card\\CardBody.js":"15","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Grid\\GridContainer.js":"16","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\cardBodyStyle.js":"17","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\cardFooterStyle.js":"18","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\dropdownStyle.js":"19","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\UpgradeToPro\\UpgradeToPro.js":"20","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Card\\CardFooter.js":"21","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\CustomInput\\CustomInput.js":"22","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\footerStyle.js":"23","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\cardStyle.js":"24","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\cardHeaderStyle.js":"25","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\customTabsStyle.js":"26","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\headerLinksStyle.js":"27","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Sidebar\\Sidebar.js":"28","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\Dashboard\\Dashboard.js":"29","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\UserProfile\\UserProfile.js":"30","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react.js":"31","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Navbars\\AdminNavbarLinks.js":"32","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Card\\Card.js":"33","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\views\\dashboardStyle.js":"34","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\layouts\\LoginPage.js":"35","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\Routes.js":"36","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Forms\\Auth\\LoginForm.js":"37","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Forms\\Auth\\FormStyle.js":"38","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\layouts\\LoginPageStyle.js":"39","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\Icons\\Icons.js":"40","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Card\\CardAvatar.js":"41","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\CustomButtons\\Button.js":"42","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\cardAvatarStyle.js":"43","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\rtlHeaderLinksStyle.js":"44","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\buttonStyle.js":"45","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\_utils\\fx.js":"46","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\_utils\\auth.js":"47","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\_utils\\environment.js":"48","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\PageFooter.js":"49","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\NotFound.js":"50","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\_utils\\browser.js":"51","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\icons\\Icons.js":"52","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\PageTitle.js":"53","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Forms\\Auth\\ButtonLoader.js":"54","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\layouts\\RegisterPage.js":"55","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Forms\\Auth\\RegisterForm.js":"56","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Loaders\\CardFrequencyLoader.js":"57","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\layouts\\RegisterPageStyle.js":"58","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\layouts\\AuthPageStyle.js":"59"},{"size":1299,"mtime":1611338917196,"results":"60","hashOfConfig":"61"},{"size":3343,"mtime":1611330100935,"results":"62","hashOfConfig":"61"},{"size":1823,"mtime":1611241742397,"results":"63","hashOfConfig":"61"},{"size":702,"mtime":1611247565125,"results":"64","hashOfConfig":"61"},{"size":2184,"mtime":1611247453371,"results":"65","hashOfConfig":"61"},{"size":427,"mtime":1611243016011,"results":"66","hashOfConfig":"61"},{"size":382,"mtime":1611243726665,"results":"67","hashOfConfig":"61"},{"size":2647,"mtime":1611312810814,"results":"68","hashOfConfig":"61"},{"size":223,"mtime":1611242473740,"results":"69","hashOfConfig":"61"},{"size":6720,"mtime":1611246805833,"results":"70","hashOfConfig":"61"},{"size":5460,"mtime":1611246999360,"results":"71","hashOfConfig":"61"},{"size":1544,"mtime":1611247071736,"results":"72","hashOfConfig":"61"},{"size":616,"mtime":1611248343660,"results":"73","hashOfConfig":"61"},{"size":1258,"mtime":1611235514089,"results":"74","hashOfConfig":"61"},{"size":1018,"mtime":1611235203888,"results":"75","hashOfConfig":"61"},{"size":651,"mtime":1611248363035,"results":"76","hashOfConfig":"61"},{"size":298,"mtime":1611247275901,"results":"77","hashOfConfig":"61"},{"size":1176,"mtime":1611246886146,"results":"78","hashOfConfig":"61"},{"size":2919,"mtime":1611246547055,"results":"79","hashOfConfig":"61"},{"size":237,"mtime":1611242225630,"results":"80","hashOfConfig":"61"},{"size":1174,"mtime":1611235221110,"results":"81","hashOfConfig":"61"},{"size":2237,"mtime":1611229807490,"results":"82","hashOfConfig":"61"},{"size":988,"mtime":1611247125167,"results":"83","hashOfConfig":"61"},{"size":797,"mtime":1611247518589,"results":"84","hashOfConfig":"61"},{"size":2958,"mtime":1611247244624,"results":"85","hashOfConfig":"61"},{"size":1698,"mtime":1611247345485,"results":"86","hashOfConfig":"61"},{"size":2423,"mtime":1611247102155,"results":"87","hashOfConfig":"61"},{"size":5256,"mtime":1611241640246,"results":"88","hashOfConfig":"61"},{"size":1881,"mtime":1611241134276,"results":"89","hashOfConfig":"61"},{"size":6192,"mtime":1611241893096,"results":"90","hashOfConfig":"61"},{"size":6001,"mtime":1611247674888,"results":"91","hashOfConfig":"61"},{"size":7758,"mtime":1611229426196,"results":"92","hashOfConfig":"61"},{"size":1050,"mtime":1611235345011,"results":"93","hashOfConfig":"61"},{"size":1709,"mtime":1611247615389,"results":"94","hashOfConfig":"61"},{"size":3365,"mtime":1611403538713,"results":"95","hashOfConfig":"61"},{"size":2182,"mtime":1611407394499,"results":"96","hashOfConfig":"61"},{"size":6627,"mtime":1611571372104,"results":"97","hashOfConfig":"61"},{"size":5554,"mtime":1611335751067,"results":"98","hashOfConfig":"61"},{"size":707,"mtime":1611335959726,"results":"99","hashOfConfig":"61"},{"size":199,"mtime":1611243238396,"results":"100","hashOfConfig":"61"},{"size":1045,"mtime":1611236052237,"results":"101","hashOfConfig":"61"},{"size":1764,"mtime":1611229139839,"results":"102","hashOfConfig":"61"},{"size":808,"mtime":1611246720667,"results":"103","hashOfConfig":"61"},{"size":2480,"mtime":1611247488466,"results":"104","hashOfConfig":"61"},{"size":9385,"mtime":1611247314272,"results":"105","hashOfConfig":"61"},{"size":9847,"mtime":1611340478982,"results":"106","hashOfConfig":"61"},{"size":3169,"mtime":1611340601035,"results":"107","hashOfConfig":"61"},{"size":702,"mtime":1611340478942,"results":"108","hashOfConfig":"61"},{"size":2723,"mtime":1611342126806,"results":"109","hashOfConfig":"61"},{"size":1441,"mtime":1611341639550,"results":"110","hashOfConfig":"61"},{"size":894,"mtime":1611340478857,"results":"111","hashOfConfig":"61"},{"size":2271,"mtime":1611342087822,"results":"112","hashOfConfig":"61"},{"size":230,"mtime":1611341268993,"results":"113","hashOfConfig":"61"},{"size":394,"mtime":1611402428363,"results":"114","hashOfConfig":"61"},{"size":1524,"mtime":1611406388992,"results":"115","hashOfConfig":"61"},{"size":15208,"mtime":1611406215530,"results":"116","hashOfConfig":"61"},{"size":422,"mtime":1611406070974,"results":"117","hashOfConfig":"61"},{"size":936,"mtime":1611406304768,"results":"118","hashOfConfig":"61"},{"size":1383,"mtime":1611336063868,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vbjjud",{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"125"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"125"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\index.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\layouts\\Admin.js",["250"],"import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n// creates a beautiful scrollbar\nimport PerfectScrollbar from \"perfect-scrollbar\";\nimport \"perfect-scrollbar/css/perfect-scrollbar.css\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n// core components\nimport Navbar from \"../components/Navbars/Navbar\";\nimport Footer from \"../components/Footer/Footer.js\";\nimport Sidebar from \"../components/Sidebar/Sidebar.js\";\n\n\nimport routes from \"../Routes.js\";\n\nimport styles from \"../assets/jss/material-dashboard-react/layouts/adminStyle.js\";\n\nimport bgImage from \"../assets/img/sidebar-2.jpg\";\nimport logo from \"../assets/img/gotruck-logo.png\";\n\nlet ps;\n\nconst switchRoutes = (\n  <Switch>\n    {routes.map((prop, key) => {\n      if (prop.layout === \"/admin\") {\n        return (\n          <Route\n            path={prop.layout + prop.path}\n            component={prop.component}\n            key={key}\n          />\n        );\n      }\n      return null;\n    })}\n    <Redirect from=\"/admin\" to=\"/admin/dashboard\" />\n  </Switch>\n);\n\nconst useStyles = makeStyles(styles);\n\nexport default function Admin({ ...rest }) {\n  // styles\n  const classes = useStyles();\n  const mainPanel = React.createRef();\n  \n  // states and functions\n  const [image] = React.useState(bgImage);\n  const [color] = React.useState(\"blue\");\n  const [fixedClasses, setFixedClasses] = React.useState(\"dropdown show\");\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleFixedClick = () => {\n    if (fixedClasses === \"dropdown\") {\n      setFixedClasses(\"dropdown show\");\n    } else {\n      setFixedClasses(\"dropdown\");\n    }\n  };\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n  const getRoute = () => {\n    return window.location.pathname !== \"/admin/maps\";\n  };\n  const resizeFunction = () => {\n    if (window.innerWidth >= 960) {\n      setMobileOpen(false);\n    }\n  };\n  // initialize and destroy the PerfectScrollbar plugin\n  React.useEffect(() => {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps = new PerfectScrollbar(mainPanel.current, {\n        suppressScrollX: true,\n        suppressScrollY: false\n      });\n      document.body.style.overflow = \"hidden\";\n    }\n    window.addEventListener(\"resize\", resizeFunction);\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      if (navigator.platform.indexOf(\"Win\") > -1) {\n        ps.destroy();\n      }\n      window.removeEventListener(\"resize\", resizeFunction);\n    };\n  }, [mainPanel]);\n  return (\n    <div className={classes.wrapper}>\n      <Sidebar\n        routes={routes}\n        logoText={\"Gotruck\"}\n        logo={logo}\n        image={image}\n        handleDrawerToggle={handleDrawerToggle}\n        open={mobileOpen}\n        color={color}\n        {...rest}\n      />\n      <div className={classes.mainPanel} ref={mainPanel}>\n        <Navbar\n          routes={routes}\n          handleDrawerToggle={handleDrawerToggle}\n          {...rest}\n        />\n        {getRoute() ? (\n          <div className={classes.content}>\n            <div className={classes.container}>{switchRoutes}</div>\n          </div>\n        ) : (\n          <div className={classes.map}>{switchRoutes}</div>\n        )}\n        {getRoute() ? <Footer /> : null}\n      </div>\n    </div>\n  );\n}\n",["251","252"],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Footer\\Footer.js",[],["253","254"],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\layouts\\adminStyle.js",[],["255","256"],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Navbars\\Navbar.js",[],["257","258"],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\TableList\\TableList.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\Notifications\\Notifications.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\Maps\\Maps.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\Typography\\Typography.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\sidebarStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Navbars\\RTLNavbarLinks.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\headerStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Grid\\GridItem.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Card\\CardHeader.js",[],["259","260"],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Card\\CardBody.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Grid\\GridContainer.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\cardBodyStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\cardFooterStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\dropdownStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\UpgradeToPro\\UpgradeToPro.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Card\\CardFooter.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\CustomInput\\CustomInput.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\footerStyle.js",[],["261","262"],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\cardStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\cardHeaderStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\customTabsStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\headerLinksStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Sidebar\\Sidebar.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\Dashboard\\Dashboard.js",[],["263","264"],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\UserProfile\\UserProfile.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Navbars\\AdminNavbarLinks.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Card\\Card.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\views\\dashboardStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\layouts\\LoginPage.js",["265"],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\Routes.js",["266"],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Forms\\Auth\\LoginForm.js",["267","268","269","270","271","272","273"],"import { useFormik } from 'formik';\r\nimport React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Link } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport ButtonLoader from \"./ButtonLoader\";\r\n// import { logUserIn } from '../../../APIs/Create';\r\nimport { TogglePasswordVisibilitySVGIcon, WarningSVGIcon } from '../../../assets/icons/Icons';\r\nimport FormStyle from \"./FormStyle\";\r\n\r\nfunction LoginForm({ push, customerId }) {\r\n  // #region States\r\n  const [passwordFieldType, setPasswordFieldType] = useState('password');\r\n  const [toast, setToast] = useState({\r\n    showToast: false,\r\n    toastType: undefined,\r\n    toastMessage: undefined,\r\n  });\r\n  const { t } = useTranslation();\r\n  const sub = window.location.hostname.split('.')[0];\r\n\r\n  // #endregion\r\n\r\n  // #region Functions\r\n  function togglePasswordVisibility() {\r\n    if (passwordFieldType === 'password') {\r\n      setPasswordFieldType('text');\r\n    } else {\r\n      setPasswordFieldType('password');\r\n    }\r\n  }\r\n  // #endregion\r\n\r\n  // #region Custom Hooks\r\n  const {\r\n    handleSubmit,\r\n    isSubmitting,\r\n    isValid,\r\n    dirty,\r\n    errors,\r\n    touched,\r\n    values,\r\n    setSubmitting,\r\n    resetForm,\r\n    getFieldProps,\r\n  } = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n    validationSchema: Yup.object({\r\n      email: Yup.string()\r\n        .email('Invalid email address')\r\n        .required(`${t('forms.required')}`),\r\n      password: Yup.string().required(`${('forms.required')}`),\r\n    }),\r\n    async onSubmit(values) {\r\n      // const { multiTenant } = environment(sub);\r\n      try {\r\n        // let loginCredentials = {\r\n        //   email: values.email,\r\n        //   secret: values.password,\r\n        //   user_type: 'customer',\r\n        // };\r\n        // if (!notAllowedSubDomain().includes(sub)) {\r\n        //   if (multiTenant) {\r\n        //     loginCredentials = { ...loginCredentials, customerId };\r\n        //   }\r\n        // }\r\n        // const res = await logUserIn(loginCredentials);\r\n        // if (res) {\r\n          // 1. Authenticate user into MainApp\r\n          // authUserAsIs(res.data);\r\n\r\n          // 2. Get customer id from token\r\n          let customerId;\r\n          // if (!notAllowedSubDomain().includes(sub)) {\r\n          //   if (multiTenant) {\r\n          //     customerId = 'app';\r\n          //   } else {\r\n          //     customerId = getCustomerIdFromToken(res.data.data.token);\r\n          //   }\r\n          // } else {\r\n          //   customerId = getCustomerIdFromToken(res.data.data.token);\r\n          // }\r\n          // 3. Reset values\r\n          values = null;\r\n\r\n          // 3. Route to the dashboard\r\n          push(`/${customerId}/dashboard`);\r\n\r\n          resetForm();\r\n        // }\r\n      } catch ({ response }) {\r\n        if (response) {\r\n          // const { message: errorMessage } = response.data;\r\n          // setToast({\r\n          //   showToast: true,\r\n          //   toastType: toastEnums.FAILURE,\r\n          //   toastMessage: errorMessage,\r\n          // });\r\n        } else {\r\n          // setToast({\r\n          //   showToast: true,\r\n          //   toastType: toastEnums.FAILURE,\r\n          //   toastMessage: 'Something went wrong. Try again.',\r\n          // });\r\n        }\r\n      }\r\n      setSubmitting(false);\r\n    },\r\n  });\r\n  // #endregion\r\n\r\n  return (\r\n    <>\r\n      <FormStyle id='formStyle' dir={localStorage.i18nextLng === 'ar' ? 'rtl' : 'auto'}>\r\n        <form id='loginForm' noValidate onSubmit={handleSubmit}>\r\n          <div className='formContentBlock'>\r\n            <header className='formHeader'>\r\n              <h2 className='formTitle'>{t('common.signIn')}</h2>\r\n            </header>\r\n            <div className='formContent'>\r\n              <div className='fields'>\r\n                <div className='email formFieldBlock'>\r\n                  <header className='formFieldHeader'>\r\n                    <label htmlFor='email'>{t('forms.email')}</label>\r\n                    <div className='errorMessageBlock'>\r\n                      {touched['email'] && errors['email'] && (\r\n                        <>\r\n                          {/* <WarningSVGIcon /> */}\r\n                          <p className='errorMessage'>{errors['email']}</p>\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                  </header>\r\n                  <div className='formFieldWrap' data-isinvalid={touched['email'] && errors['email']}>\r\n                    <input\r\n                      className='email formField'\r\n                      type='email'\r\n                      name='email'\r\n                      autoComplete='off'\r\n                      {...getFieldProps('email')}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className='password formFieldBlock'>\r\n                  <header className='formFieldHeader'>\r\n                    <label htmlFor='password'>{t('forms.password')}</label>\r\n                    <div className='errorMessageBlock'>\r\n                      {touched['password'] && errors['password'] && (\r\n                        <>\r\n                          <WarningSVGIcon />\r\n                          <p className='errorMessage'>{errors['password']}</p>\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                  </header>\r\n                  <div className='formFieldWrap' data-isinvalid={touched['password'] && errors['password']}>\r\n                    <input\r\n                      className='password formField'\r\n                      type={passwordFieldType}\r\n                      name='password'\r\n                      autoComplete='off'\r\n                      data-isinvalid={touched['password'] && errors['password']}\r\n                      {...getFieldProps('password')}\r\n                    />\r\n                    {values['password'].length > 0 && (\r\n                      <span className='formFieldIconWrap' onClick={togglePasswordVisibility}>\r\n                        <TogglePasswordVisibilitySVGIcon />\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                   <div className='forgotPasswordBlock'>\r\n                  <Link to='/forgot-password'>{('FORGOT - PASSWORD')}</Link>\r\n                </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className='cta dp-flex ju-cont-ce'>\r\n             <Link to='/admin/dashboard'>{('SIGN-IN')}</Link>\r\n          </div>\r\n        </form>\r\n      </FormStyle>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LoginForm;\r\n","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Forms\\Auth\\FormStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\layouts\\LoginPageStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\views\\Icons\\Icons.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Card\\CardAvatar.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\CustomButtons\\Button.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\cardAvatarStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\rtlHeaderLinksStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\jss\\material-dashboard-react\\components\\buttonStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\_utils\\fx.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\_utils\\auth.js",["274"],"import axios from 'axios';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { setItemInLocalStorage } from './browser';\r\nimport { baseurl, notAllowedSubDomain } from './fx';\r\nimport { environment } from './environment';\r\n// import { Apptoken } from '../APIs/Read';\r\nlet userDataFromToken = {};\r\nconst sub = window.location.hostname.split('.')[0];\r\n\r\nconst setAuthToken = token => {\r\n  if (token) {\r\n    // 1. Apply to every request\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n  } else {\r\n    // 1. Delete the Auth Header\r\n    delete axios.defaults.headers.common['Authorization'];\r\n  }\r\n};\r\n\r\nconst setInterceptor = (axios, customerId) => {\r\n  //add interceptor\r\n  axios.interceptors.response.use(\r\n    response => {\r\n      return response;\r\n    },\r\n    error => {\r\n      //check the response status\r\n      if (error.response && error.response.status === 401) {\r\n        //clear the local storage\r\n        logOut(customerId);\r\n      }\r\n      // Do something with response error\r\n      return Promise.reject(error);\r\n    },\r\n  );\r\n};\r\n\r\nconst logOut = customerId => {\r\n  // 1. Remove specific customer token from localStorage\r\n  localStorage.removeItem(`user-${customerId}`);\r\n\r\n  // 2. Remove the Auth Header\r\n  setAuthToken(false);\r\n\r\n  // 3. Set the current user to an empty object\r\n  window.location.href = '/';\r\n};\r\n\r\nconst authUserAsIs = loginFormResponse => {\r\n  const token = loginFormResponse.data.token;\r\n  const { multiTenant } = environment(sub);\r\n  let customerId;\r\n  if (!notAllowedSubDomain().includes(sub)) {\r\n    if (multiTenant) {\r\n      customerId = 'app';\r\n    } else {\r\n      customerId = getCustomerIdFromToken(token);\r\n    }\r\n  } else {\r\n    customerId = getCustomerIdFromToken(token);\r\n  }\r\n  // console.log({customerId})\r\n  // 1. Set item in local storage\r\n  setItemInLocalStorage(`user-${customerId}`, JSON.stringify(loginFormResponse.data));\r\n\r\n  // 2. Set token to Auth Header\r\n  setAuthToken(token);\r\n};\r\n\r\n// get identifier from token => rrenaame\r\nconst getCustomerIdFromToken = token => {\r\n  let { customerId, accountName } = jwt_decode(token);\r\n  //?? If \"account name\" is available, use it.\r\n  if (accountName && accountName.length > 0) {\r\n    customerId = accountName;\r\n  }\r\n\r\n  return customerId;\r\n};\r\n\r\nconst getUserDetails = customerId => {\r\n  const authToken = JSON.parse(localStorage[`user-${customerId}`]).token;\r\n  const userDetailsFromLocalStorage = JSON.parse(localStorage[`user-${customerId}`]).user;\r\n\r\n  const res = baseurl.post('/user/decodeToken', { token: authToken });\r\n\r\n  res\r\n    .then(data => {\r\n      userDataFromToken = { ...userDataFromToken, ...data.data.data };\r\n    })\r\n    .catch(err => {\r\n      console.log({ err });\r\n    });\r\n\r\n  return { ...userDetailsFromLocalStorage, ...userDataFromToken, token: authToken };\r\n};\r\n\r\nconst getUserInfo = customerId => {\r\n  const authToken = JSON.parse(localStorage[`user-${customerId}`]).token;\r\n\r\n  return baseurl.get(`/user/${customerId}`, {\r\n    // headers: { Authorization: `Bearer ${authToken}`, Apptoken },\r\n  });\r\n};\r\n\r\nexport { setAuthToken, logOut, getCustomerIdFromToken, getUserDetails, authUserAsIs, setInterceptor, getUserInfo };\r\n","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\_utils\\environment.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\PageFooter.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\NotFound.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\_utils\\browser.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\assets\\icons\\Icons.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\PageTitle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Forms\\Auth\\ButtonLoader.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\layouts\\RegisterPage.js",["275","276"],"import React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport RegisterForm from '../components/Forms/Auth/RegisterForm';\r\nimport PageFooter from '../components/PageFooter';\r\nimport PageTitle from '../components/PageTitle';\r\n// import Toast from '../components/Shared/Toast/Toast';\r\nimport AuthPageStyle from './AuthPageStyle';\r\nimport RegisterPageStyle from './RegisterPageStyle';\r\nimport { setDocumentTitle } from '../_utils/browser';\r\n\r\nfunction RegisterPage() {\r\n  const { push } = useHistory();\r\n  // const { t } = useTranslation();\r\n\r\n  const [toast, setToast] = useState({\r\n    showToast: false,\r\n    toastType: undefined,\r\n    toastMessage: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setDocumentTitle('Gotruck -  Customer', 'Register');\r\n  }, [push]);\r\n\r\n  return (\r\n    <AuthPageStyle id='authPage'>\r\n      <RegisterPageStyle id='registerPage'>\r\n        <main className='padding-top--50 padding-bottom--100'>\r\n          {/* <PageTitle>{t('common.dashboardTitle')}</PageTitle> */}\r\n          <PageTitle>{('common.dashboardTitle')}</PageTitle>\r\n\r\n          <RegisterForm {...{ push, setToast }} />\r\n          <div className='alternateAuth'>\r\n            <Link to='/'>{('common.alreadyHaveAnAccount')}</Link>\r\n          </div>\r\n        </main>\r\n        {/* <Toast {...{ ...toast, setToast }} /> */}\r\n        <PageFooter />\r\n      </RegisterPageStyle>\r\n    </AuthPageStyle>\r\n  );\r\n}\r\n\r\nexport default RegisterPage;\r\n","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Forms\\Auth\\RegisterForm.js",["277","278","279","280","281"],"import { ErrorMessage, Field, Form, withFormik } from 'formik';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport * as Yup from 'yup';\r\n// import { registerUser } from '../../../APIs/Create';\r\nimport { TogglePasswordVisibilitySVGIcon, WarningSVGIcon, ArrowSVGIcon } from '../../../assets/icons/Icons';\r\nimport NigeriaFlag from '../../../assets/icons/naija.png';\r\nimport FormStyle from \"./FormStyle\";\r\n// import { authUserAsIs, getCustomerIdFromToken } from '../../../_utils/auth';\r\n// import { toastEnums } from '../../../_utils/constants';\r\nimport { baseurl, capitalizeFirstLetter, uuid, phoneFormatter } from \"../../../_utils/fx\";\r\nimport ButtonLoader from '../Auth/ButtonLoader';\r\nimport CardFrequencyLoader from \"../../Loaders/CardFrequencyLoader\";\r\n\r\nfunction BusinessCountryList({ setBusinessCountry, selectedCountry, countries }) {\r\n  return countries.map(({ country, flag, phoneCode }) => {\r\n    return (\r\n      <div\r\n        // className='popupItemWrap'\r\n        // key={uuid()\r\n        // }\r\n        data-iscountryselected={country === selectedCountry}\r\n        onClick={() => setBusinessCountry({ country, flag, phoneCode })}\r\n      >\r\n        <img src={flag} alt={`${country} flag`} className='popupIcon' />\r\n        {/* <p className='countryName'>{capitalizeFirstLetter(country)}</p> */}\r\n        <p className='countryDialingCode'>{phoneCode}</p>\r\n      </div>\r\n    );\r\n  });\r\n}\r\n\r\nfunction RegisterForm({ isSubmitting, isValid, errors, touched, values, setValues, dirty }) {\r\n  // #region States\r\n  const [isPopupActive, setIsPopupActive] = useState(false);\r\n  const [selectedCountry, setSelectedCountry] = useState({\r\n    country: 'Nigeria',\r\n    flag: NigeriaFlag,\r\n    dialingCode: '+234',\r\n  });\r\n  const [dialingCode, setDialingCode] = useState('+234');\r\n  const [phoneNumberFormat] = useState('0802-123-4567');\r\n  const [passwordFieldType, setPasswordFieldType] = useState('password');\r\n  const [countries, setCountries] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // #endregion\r\n  const { t } = useTranslation();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        if (countries.length === 0) {\r\n          setLoading(true);\r\n          const endpoint = '/route/country';\r\n          const res = await baseurl.get(endpoint);\r\n          if (res) {\r\n            setLoading(false);\r\n            setCountries(res.data.data.countries);\r\n          }\r\n        }\r\n      } catch (error) {}\r\n    })();\r\n  }, [countries.length]);\r\n\r\n  // #region Functions\r\n  function togglePasswordVisibility() {\r\n    if (passwordFieldType === 'password') {\r\n      setPasswordFieldType('text');\r\n    } else {\r\n      setPasswordFieldType('password');\r\n    }\r\n  }\r\n\r\n  function setBusinessCountry({ country, flag, phoneCode }) {\r\n    setSelectedCountry({ country, flag, phoneCode });\r\n    setDialingCode(phoneCode);\r\n    showPopup();\r\n  }\r\n\r\n  function showPopup() {\r\n    setIsPopupActive(!isPopupActive);\r\n  }\r\n  // #endregion\r\n\r\n  useEffect(() => {\r\n    setValues({\r\n      ...values,\r\n      businessCountry: selectedCountry.country,\r\n      dialingCode: selectedCountry.phoneCode,\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedCountry]);\r\n  // #endregion\r\n\r\n  // #region Returns\r\n  return (\r\n    <FormStyle id='formStyle' dir={localStorage.i18nextLng === 'ar' ? 'rtl' : 'auto'}>\r\n      <Form id='registerForm' noValidate className='mg-hz-30'>\r\n        <div className='formContentBlock'>\r\n          <header className='formHeader'>\r\n            <h2 className='formTitle'>{t('common.register')}</h2>\r\n          </header>\r\n          <div className='formContent'>\r\n            <div className='fields'>\r\n              {/* First and Last name */}\r\n              <div className='dp-grid col-gap-10 formFieldSplit'>\r\n                <div className='firstName formFieldBlock'>\r\n                  <header className='formFieldHeader'>\r\n                    <label htmlFor='firstName'>{t('forms.firstName')}</label>\r\n                    <div className='errorMessageBlock'>\r\n                      <ErrorMessage name='firstName'>\r\n                        {errMsg => (\r\n                          <>\r\n                            <WarningSVGIcon />\r\n                            <p className='errorMessage'>{errMsg}</p>\r\n                          </>\r\n                        )}\r\n                      </ErrorMessage>\r\n                    </div>\r\n                  </header>\r\n                  <div className='formFieldWrap' data-isinvalid={touched['firstName'] && errors['firstName']}>\r\n                    <Field className='firstName' type='text' name='firstName' autoComplete='off' />\r\n                  </div>\r\n                </div>\r\n                <div className='lastName formFieldBlock'>\r\n                  <header className='formFieldHeader'>\r\n                    <label htmlFor='lastName'>{t('forms.lastName')}</label>\r\n                    <div className='errorMessageBlock'>\r\n                      <ErrorMessage name='lastName'>\r\n                        {errMsg => (\r\n                          <>\r\n                            <WarningSVGIcon />\r\n                            <p className='errorMessage'>{errMsg}</p>\r\n                          </>\r\n                        )}\r\n                      </ErrorMessage>\r\n                    </div>\r\n                  </header>\r\n                  <div className='formFieldWrap' data-isinvalid={touched['lastName'] && errors['lastName']}>\r\n                    <Field className='lastName' type='text' name='lastName' autoComplete='off' />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* Email */}\r\n              <div className='email formFieldBlock'>\r\n                <header className='formFieldHeader'>\r\n                  <label htmlFor='email'>{t('forms.email')}</label>\r\n                  <div className='errorMessageBlock'>\r\n                    <ErrorMessage name='email'>\r\n                      {errMsg => (\r\n                        <>\r\n                          <WarningSVGIcon />\r\n                          <p className='errorMessage'>{errMsg}</p>\r\n                        </>\r\n                      )}\r\n                    </ErrorMessage>\r\n                  </div>\r\n                </header>\r\n                <div className='formFieldWrap' data-isinvalid={touched['email'] && errors['email']}>\r\n                  <Field\r\n                    className='email'\r\n                    type='email'\r\n                    name='email'\r\n                    autoComplete='off'\r\n                    data-isinvalid={touched['email'] && errors['email']}\r\n                  />\r\n                </div>\r\n              </div>\r\n              {/* Password */}\r\n              <div className='password formFieldBlock'>\r\n                <header className='formFieldHeader'>\r\n                  <label htmlFor='password'>{t('forms.password')}</label>\r\n                  <div className='errorMessageBlock'>\r\n                    <ErrorMessage name='password'>\r\n                      {errMsg => (\r\n                        <>\r\n                          <WarningSVGIcon />\r\n                          <p className='errorMessage'>{errMsg}</p>\r\n                        </>\r\n                      )}\r\n                    </ErrorMessage>\r\n                  </div>\r\n                </header>\r\n                <div className='formFieldWrap' data-isinvalid={touched['password'] && errors['password']}>\r\n                  <Field className='password formField' type={passwordFieldType} name='password' autoComplete='off' />\r\n                  {values['password'] && values['password'].length > 0 && (\r\n                    <span className='formFieldIconWrap' onClick={togglePasswordVisibility}>\r\n                      <TogglePasswordVisibilitySVGIcon />\r\n                    </span>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              {/* Business country and location */}\r\n              <div className='dp-grid col-gap-10 formFieldSplit'>\r\n                <div className='businessCountry formFieldBlock'>\r\n                  <header className='formFieldHeader' onClick={showPopup}>\r\n                    <label htmlFor='businessCountry'>{t('inputText.bizCountry')}</label>\r\n                    {loading && <CardFrequencyLoader />}\r\n                  </header>\r\n                  <div className='formFieldWrap optionSwitcher' onClick={showPopup} role='button'>\r\n                    <div className='optionIcon'>\r\n                      <img src={selectedCountry.flag} alt='Nigeria flag' />\r\n                    </div>\r\n                    {/* <p className='optionValue'>{capitalizeFirstLetter(selectedCountry.country)}</p> */}\r\n                    <div className='optionIndicator'>\r\n                      <ArrowSVGIcon />\r\n                    </div>\r\n                  </div>\r\n                  {isPopupActive && (\r\n                    <div className='popup'>\r\n                      <BusinessCountryList\r\n                        countries={countries}\r\n                        setBusinessCountry={setBusinessCountry}\r\n                        // selectedCountry={capitalizeFirstLetter(selectedCountry.country)}\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className='location formFieldBlock'>\r\n                  <header className='formFieldHeader'>\r\n                    <label htmlFor='location'>{t('inputText.location')}</label>\r\n                    <div className='errorMessageBlock'>\r\n                      <ErrorMessage name='location'>\r\n                        {errMsg => (\r\n                          <>\r\n                            <WarningSVGIcon />\r\n                            <p className='errorMessage'>{errMsg}</p>\r\n                          </>\r\n                        )}\r\n                      </ErrorMessage>\r\n                    </div>\r\n                  </header>\r\n                  <div className='formFieldWrap' data-isinvalid={touched['location'] && errors['location']}>\r\n                    <Field className='location' type='text' name='location' autoComplete='off' />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              {/* Company name*/}\r\n              <div className='companyName formFieldBlock'>\r\n                <header className='formFieldHeader'>\r\n                  <label htmlFor='companyName'>{t('inputText.companyName')}</label>\r\n                  <div className='errorMessageBlock'>\r\n                    <ErrorMessage name='companyName'>\r\n                      {errMsg => (\r\n                        <>\r\n                          <WarningSVGIcon />\r\n                          <p className='errorMessage'>{errMsg}</p>\r\n                        </>\r\n                      )}\r\n                    </ErrorMessage>\r\n                  </div>\r\n                </header>\r\n                <div className='formFieldWrap' data-isinvalid={touched['companyName'] && errors['companyName']}>\r\n                  <Field className='companyName' type='text' name='companyName' autoComplete='off' />\r\n                </div>\r\n              </div>\r\n              {/* Contact phone   */}\r\n              <div className='contactPhone formFieldBlock forInputTypeNumber'>\r\n                <header className='formFieldHeader'>\r\n                  <label htmlFor='contactPhone'>{t('inputText.contactPhone')}</label>\r\n                  <div className='errorMessageBlock'>\r\n                    <ErrorMessage name='contactPhone'>\r\n                      {errMsg => (\r\n                        <>\r\n                          <WarningSVGIcon />\r\n                          <p className='errorMessage'>{errMsg}</p>\r\n                        </>\r\n                      )}\r\n                    </ErrorMessage>\r\n                  </div>\r\n                </header>\r\n                <div className='formFieldWrap' data-isinvalid={touched['contactPhone'] && errors['contactPhone']}>\r\n                  <div className='formFieldIconWrap'>\r\n                    <p className='countryDialingCode'>{dialingCode}</p>\r\n                  </div>\r\n                  <div className='separator'></div>\r\n                  <Field\r\n                    className='contactPhone'\r\n                    type='number'\r\n                    name='contactPhone'\r\n                    autoComplete='off'\r\n                    min='0'\r\n                    placeholder={phoneNumberFormat}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='cta dp-flex ju-cont-ce'>\r\n          <button type='submit' className='dp-flex' disabled={!(isValid && dirty) || isSubmitting}>\r\n            {(isSubmitting && <ButtonLoader />) || <>{t('common.register')}</>}\r\n          </button>\r\n        </div>\r\n      </Form>\r\n    </FormStyle>\r\n  );\r\n  // #endregion\r\n}\r\n\r\nexport default withFormik({\r\n  validationSchema: Yup.object().shape({\r\n    firstName: Yup.string().required('Required'),\r\n    lastName: Yup.string().required('Required'),\r\n    email: Yup.string()\r\n      .email('Invalid email address')\r\n      .required('Required'),\r\n    password: Yup.string().required('Required'),\r\n    location: Yup.string().required('Invalid location'),\r\n    companyName: Yup.string().required('Please provide a country name'),\r\n    contactPhone: Yup.number()\r\n      .positive('Invalid phone number (pos)')\r\n      .required('Required'),\r\n  }),\r\n\r\n  mapPropsToValues() {\r\n    return {\r\n      firstName: '',\r\n      lastName: '',\r\n      email: '',\r\n      password: '',\r\n      location: '',\r\n      companyName: '',\r\n      contactPhone: '',\r\n    };\r\n  },\r\n\r\n  async handleSubmit(values, { resetForm, setSubmitting, props }) {\r\n    try {\r\n      const registrationCredentials = {\r\n        first_name: values.firstName,\r\n        last_name: values.lastName,\r\n        email: values.email,\r\n        secret: values.password,\r\n        // country: capitalizeFirstLetter(values.businessCountry),\r\n        location: values.location,\r\n        business_name: values.companyName,\r\n        // mobile: phoneFormatter(values.contactPhone.toString(), values.dialingCode),\r\n        user_type: 'customer',\r\n      };\r\n\r\n      // const res = await registerUser(registrationCredentials);\r\n\r\n      // if (res) {\r\n      //   // 1. Get user token\r\n      //   // let token = res.data.data.token;\r\n\r\n      //   // 2. Authenticate user into MainApp\r\n      //   // authUserAsIs(res.data);\r\n\r\n      //   // 6. Route to the dashboard\r\n      //   // props.push(`/${getCustomerIdFromToken(token)}/dashboard`);\r\n      // }\r\n      resetForm();\r\n    } catch ({ response }) {\r\n      if (response) {\r\n        // const { status: statusCode } = response;\r\n        const { message: errorMessage } = response.data;\r\n        props.setToast({\r\n          // showToast: true,\r\n          // toastType: toastEnums.FAILURE,\r\n          // toastMessage: errorMessage,\r\n        });\r\n      } else {\r\n        props.setToast({\r\n          showToast: true,\r\n          // toastType: toastEnums.FAILURE,\r\n          toastMessage: 'Something went wrong; Try again',\r\n        });\r\n      }\r\n    }\r\n    setSubmitting(false);\r\n  },\r\n})(RegisterForm);\r\n","C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\components\\Loaders\\CardFrequencyLoader.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\layouts\\RegisterPageStyle.js",[],"C:\\Users\\GTSTRIDE\\Downloads\\Dashboard DEsign\\working dashboard\\src\\layouts\\AuthPageStyle.js",[],{"ruleId":"282","severity":1,"message":"283","line":55,"column":9,"nodeType":"284","messageId":"285","endLine":55,"endColumn":25},{"ruleId":"286","replacedBy":"287"},{"ruleId":"288","replacedBy":"289"},{"ruleId":"286","replacedBy":"290"},{"ruleId":"288","replacedBy":"291"},{"ruleId":"286","replacedBy":"292"},{"ruleId":"288","replacedBy":"293"},{"ruleId":"286","replacedBy":"294"},{"ruleId":"288","replacedBy":"295"},{"ruleId":"286","replacedBy":"296"},{"ruleId":"288","replacedBy":"297"},{"ruleId":"286","replacedBy":"298"},{"ruleId":"288","replacedBy":"299"},{"ruleId":"286","replacedBy":"300"},{"ruleId":"288","replacedBy":"301"},{"ruleId":"282","severity":1,"message":"302","line":3,"column":10,"nodeType":"284","messageId":"285","endLine":3,"endColumn":24},{"ruleId":"282","severity":1,"message":"303","line":10,"column":8,"nodeType":"284","messageId":"285","endLine":10,"endColumn":20},{"ruleId":"282","severity":1,"message":"304","line":6,"column":8,"nodeType":"284","messageId":"285","endLine":6,"endColumn":20},{"ruleId":"282","severity":1,"message":"305","line":14,"column":10,"nodeType":"284","messageId":"285","endLine":14,"endColumn":15},{"ruleId":"282","severity":1,"message":"306","line":14,"column":17,"nodeType":"284","messageId":"285","endLine":14,"endColumn":25},{"ruleId":"282","severity":1,"message":"307","line":20,"column":9,"nodeType":"284","messageId":"285","endLine":20,"endColumn":12},{"ruleId":"282","severity":1,"message":"308","line":37,"column":5,"nodeType":"284","messageId":"285","endLine":37,"endColumn":17},{"ruleId":"282","severity":1,"message":"309","line":38,"column":5,"nodeType":"284","messageId":"285","endLine":38,"endColumn":12},{"ruleId":"282","severity":1,"message":"310","line":39,"column":5,"nodeType":"284","messageId":"285","endLine":39,"endColumn":10},{"ruleId":"282","severity":1,"message":"311","line":99,"column":9,"nodeType":"284","messageId":"285","endLine":99,"endColumn":18},{"ruleId":"282","severity":1,"message":"302","line":3,"column":10,"nodeType":"284","messageId":"285","endLine":3,"endColumn":24},{"ruleId":"282","severity":1,"message":"305","line":16,"column":10,"nodeType":"284","messageId":"285","endLine":16,"endColumn":15},{"ruleId":"282","severity":1,"message":"312","line":11,"column":19,"nodeType":"284","messageId":"285","endLine":11,"endColumn":40},{"ruleId":"282","severity":1,"message":"313","line":11,"column":42,"nodeType":"284","messageId":"285","endLine":11,"endColumn":46},{"ruleId":"282","severity":1,"message":"314","line":11,"column":48,"nodeType":"284","messageId":"285","endLine":11,"endColumn":62},{"ruleId":"282","severity":1,"message":"315","line":331,"column":13,"nodeType":"284","messageId":"285","endLine":331,"endColumn":36},{"ruleId":"282","severity":1,"message":"316","line":359,"column":26,"nodeType":"284","messageId":"285","endLine":359,"endColumn":38},"no-unused-vars","'handleFixedClick' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["317"],"no-negated-in-lhs",["318"],["317"],["318"],["317"],["318"],["317"],["318"],["317"],["318"],["317"],["318"],["317"],["318"],"'useTranslation' is defined but never used.","'RegisterPage' is defined but never used.","'ButtonLoader' is defined but never used.","'toast' is assigned a value but never used.","'setToast' is assigned a value but never used.","'sub' is assigned a value but never used.","'isSubmitting' is assigned a value but never used.","'isValid' is assigned a value but never used.","'dirty' is assigned a value but never used.","'authToken' is assigned a value but never used.","'capitalizeFirstLetter' is defined but never used.","'uuid' is defined but never used.","'phoneFormatter' is defined but never used.","'registrationCredentials' is assigned a value but never used.","'errorMessage' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]